//proto版本
syntax = "proto2";

//包声明
package cipv_fusion_component.proto;

message CarState {
    //car speed
    optional float v_ego = 1;       //best estimate of speed

    //which packets this state came from
    optional uint64 can_mono_time = 2; 
}

// Car parameters message
message CarParams {
  // Car identification details
  string carName = 1;         // Car model name
  string carFingerprint = 2;  // Car fingerprint for identification
  bool fuzzyFingerprint = 55; // Whether to use fuzzy fingerprint

  // Control options
  bool enableGasInterceptor = 3;  // Enable gas interceptor
  bool pcmCruise = 4;             // Openpilot's state tied to PCM's cruise state
  bool enableDsu = 6;             // Enable Driving Support Unit
  bool enableApgs = 7;            // Enable Advanced Parking Guidance System
  bool enableBsm = 56;            // Enable Blind Spot Monitoring
  bool hasStockCamera = 57;       // Presence of factory LKAS/LDW camera

  // Speed and safety settings
  float minEnableSpeed = 8;       // Minimum speed to enable functionality
  float minSteerSpeed = 9;        // Minimum speed for steering functionality
  float maxSteeringAngleDeg = 10; // Maximum steering angle in degrees
  SafetyModel safetyModel = 11;   // Safety model enum
  SafetyModel safetyModelPassive = 42; // Passive safety model (default: silent)
  int32 safetyParam = 12;          // Safety parameter

  // Steering parameters
  repeated float steerMaxBP = 13;  // List of max steering breakpoints
  repeated float steerMaxV = 14;   // List of corresponding max steering values

  // Gas and brake parameters (DEPRECATED)
  repeated float gasMaxBPDEPRECATED = 15 [deprecated = true];  // DEPRECATED: List of max gas breakpoints
  repeated float gasMaxVDEPRECATED = 16 [deprecated = true];   // DEPRECATED: List of corresponding max gas values
  repeated float brakeMaxBPDEPRECATED = 17 [deprecated = true]; // DEPRECATED: List of max brake breakpoints
  repeated float brakeMaxVDEPRECATED = 18 [deprecated = true];  // DEPRECATED: List of corresponding max brake values

  // Car details from the manual
  float mass = 19;              // Curb weight in kg
  float wheelbase = 20;         // Distance from rear axle to front axle in meters
  float centerToFront = 21;     // Distance from center of mass to front axle in meters
  float steerRatio = 22;        // Steering wheel angle to front wheel angle ratio
  float steerRatioRear = 23;    // Steering wheel angle to rear wheel angle ratio (usually 0)

  // Derived values
  float rotationalInertia = 24;     // Body rotational inertia in kg*m^2
  float tireStiffnessFront = 25;    // Front tire coefficient of stiffness in N/rad
  float tireStiffnessRear = 26;     // Rear tire coefficient of stiffness in N/rad

  // Longitudinal tuning parameters
  LongitudinalPIDTuning longitudinalTuning = 27;  // Longitudinal PID tuning

  // Lateral parameters
  LateralParams lateralParams = 28;  // Lateral parameters

  // Lateral tuning (union of PID, INDITuning, and LQRTuning)
  oneof lateralTuning {
    LateralPIDTuning pid = 29;    // PID tuning
    LateralINDITuning indi = 30;  // INDI tuning
    LateralLQRTuning lqr = 31;    // LQR tuning
  }

  bool steerLimitAlert = 32;      // Steering limit alert
  float steerLimitTimer = 33;     // Time before steer limit alert is issued

  float vEgoStopping = 34;        // Speed at which the car goes into stopping state
  bool directAccelControl = 35;   // Whether the car has direct acceleration control
  bool stoppingControl = 36;      // Whether the car allows full control when stopping at low speeds
  float startAccel = 37;          // Required acceleration to overcome creep braking
  float steerRateCost = 38;       // Lateral MPC cost on steering rate
  SteerControlType steerControlType = 39;  // Steer control type

  bool radarOffCan = 40;          // True when radar objects aren't visible on CAN
  float minSpeedCan = 41;         // Minimum vehicle speed from CAN (below this value drops to 0)
  float stoppingDecelRate = 43;   // Deceleration rate while trying to stop
  float startingAccelRate = 44;   // Acceleration rate while trying to start

  float steerActuatorDelay = 45;  // Steering wheel actuator delay in seconds
  float longitudinalActuatorDelay = 46;  // Gas/Brake actuator delay in seconds
  bool openpilotLongitudinalControl = 47; // Whether openpilot does longitudinal control
  string carVin = 48;            // Vehicle Identification Number (VIN) queried during fingerprinting
  bool dashcamOnly = 49;         // Whether it's a dashcam-only setup
  TransmissionType transmissionType = 50; // Transmission type enum
  repeated CarFw carFw = 51;     // List of car firmware details

  float radarTimeStep = 52;      // Time delta between radar updates
  bool communityFeature = 53;    // True if a community maintained feature is detected
  FingerprintSource fingerprintSource = 54; // Fingerprint source enum
  NetworkLocation networkLocation = 55;     // Network location enum

  // Deprecated fields
  bool enableCameraDEPRECATED = 56 [deprecated = true]; // Deprecated: enable camera
  bool isPandaBlackDEPRECATED = 57 [deprecated = true]; // Deprecated: is Panda Black

  // Inner messages and enums
    enum SafetyModel {
    SILENT = 0;
    HONDA_NIDEC = 1;
    TOYOTA = 2;
    ELM327 = 3;
    GM = 4;
    HONDA_BOSCH_GIRAFFE = 5;
    FORD = 6;
    CADILLAC = 7;
    HYUNDAI = 8;
    CHRYSLER = 9;
    TESLA = 10;
    SUBARU = 11;
    GM_PASSIVE = 12;
    MAZDA = 13;
    NISSAN = 14;
    VOLKSWAGEN = 15;
    TOYOTA_IPAS = 16;
    ALL_OUTPUT = 17;
    GM_ASCM = 18;
    NO_OUTPUT = 19;          // Like SILENT but without silent CAN TXs
    HONDA_BOSCH_HARNESS = 20;
    VOLKSWAGEN_PQ = 21;
    SUBARU_LEGACY = 22;      // Pre-Global platform
    HYUNDAI_LEGACY = 23;
    HYUNDAI_COMMUNITY = 24;
    }

  enum SteerControlType {
    TORQUE = 0;
    ANGLE = 1;
  }

  enum TransmissionType {
    UNKNOWN = 0;
    AUTOMATIC = 1;
    MANUAL = 2;
    DIRECT = 3;
    CVT = 4;
  }

  enum FingerprintSource {
    CAN = 0;
    FW = 1;
    FIXED = 2;
  }

  enum NetworkLocation {
    FWD_CAMERA = 0;
    GATEWAY = 1;
  }

  // Car firmware details
  message CarFw {
    Ecu ecu = 1;                // Electronic Control Unit enum
    bytes fwVersion = 2;        // Firmware version as bytes
    uint32 address = 3;         // Address of the ECU
    uint32 subAddress = 4;      // Sub-address of the ECU
  }

  // Longitudinal PID tuning
  message LongitudinalPIDTuning {
    repeated float kpBP = 1;      // List of proportional gain breakpoints
    repeated float kpV = 2;       // List of corresponding proportional gain values
    repeated float kiBP = 3;      // List of integral gain breakpoints
    repeated float kiV = 4;       // List of corresponding integral gain values
    repeated float deadzoneBP = 5; // List of deadzone breakpoints
    repeated float deadzoneV = 6;  // List of corresponding deadzone values
  }

  // Lateral parameters
  message LateralParams {
    repeated int32 torqueBP = 1;  // List of torque breakpoints
    repeated int32 torqueV = 2;   // List of corresponding torque values
  }

  // Lateral PID tuning
  message LateralPIDTuning {
    repeated float kpBP = 1;    // List of proportional gain breakpoints
    repeated float kpV = 2;     // List of corresponding proportional gain values
    repeated float kiBP = 3;    // List of integral gain breakpoints
    repeated float kiV = 4;     // List of corresponding integral gain values
    float kf = 5;               // Feedforward gain
  }

  // Lateral INDI tuning
  message LateralINDITuning {
    repeated float outerLoopGainBP = 1;   // List of outer loop gain breakpoints
    repeated float outerLoopGainV = 2;    // List of corresponding outer loop gain values
    repeated float innerLoopGainBP = 3;   // List of inner loop gain breakpoints
    repeated float innerLoopGainV = 4;    // List of corresponding inner loop gain values
    repeated float timeConstantBP = 5;    // List of time constant breakpoints
    repeated float timeConstantV = 6;     // List of corresponding time constant values
    repeated float actuatorEffectivenessBP = 7; // List of actuator effectiveness breakpoints
    repeated float actuatorEffectivenessV = 8;  // List of corresponding actuator effectiveness values

    // DEPRECATED fields
    float outerLoopGainDEPRECATED = 9 [deprecated = true];
    float innerLoopGainDEPRECATED = 10 [deprecated = true];
    float timeConstantDEPRECATED = 11 [deprecated = true];
    float actuatorEffectivenessDEPRECATED = 12 [deprecated = true];
  }

  // Lateral LQR tuning
  message LateralLQRTuning {
    float scale = 1;            // Scale factor
    float ki = 2;               // Integral gain
    float dcGain = 3;           // DC gain

    // State space system
    repeated float a = 4;       // State space matrix A
    repeated float b = 5;       // State space matrix B
    repeated float c = 6;       // State space matrix C

    repeated float k = 7;       // LQR gain
    repeated float l = 8;       // Kalman gain
  }

  // Car firmware enumeration
  enum Ecu {
    EPS = 0;
    ESP = 1;
    FWD_RADAR = 2;
    FWD_CAMERA = 3;
    ENGINE = 4;
    UNKNOWN = 5;
    TRANSMISSION = 6;
    SRS = 7;
    GATEWAY = 8;
    HUD = 9;
    COMBINATION_METER = 10;
    DSU = 11;
    APGS = 12;
    VSA = 13;
    PROGRAMMED_FUEL_INJECTION = 14;
    ELECTRIC_BRAKE_BOOSTER = 15;
    SHIFT_BY_WIRE = 16;
  }

  // Outer CarParams message closing brace
}


